module.exports = {

  friendlyName: 'Get access token',
  description: 'Generate a new access token for acting on behalf of a particular Facebook user account.',
  extendedDescription: 'Note that you must first have a valid `code` from the user proving that they\'re OK with this.\nYou can get a code by redirecting the user to the url generated by calling the `getLoginUrl(...)` machine.',
  cacheable: true,

  inputs: {
    appId: {
      example: '215798311808508',
      description: 'The unique identifier for your Facebook app  (i.e. this is the "App ID" listed on your app\'s dashboard page in the Facebook developer portal, e.g. https://developers.facebook.com/apps/215293311518502/dashboard)',
      required: true
    },
    appSecret: {
      example: 'dsg4901g0123456',
      description: 'The developer "secret" for your Facebook app (i.e. this is the "App Secret" listed on your app\'s dashboard page in the Facebook developer portal)',
      required: true
    },
    code: {
      example: 'AQDvCav5zRSafS795TckAerUV53xzgqRyrcfYX2i_PJFObCvACVRP-V7sfemiMPBh3TWypvagfZ6aoqfwKCNcBxg8XR_skdYUe5tsY9UzX9Z_8q4mRrqaLhwSh5OHj9ORmE4ocyd-neZtdceTZjlmEVeO38UH9QOe_md7h5hy2gMhOS6TL9IBk5Guxg3O6I0WmjpFNPoj6JzWIvG9cgj7RQqxMA2q_8EJxGPTqEbmTqOBqqCIOlvPEPCeIiy21VD9__tuzB0JvgqbVh-U_WW8mjwGBqsfxlNvjYwIxk4zBNAxuRJijkkn0TwyogFpZqIlkY',
      description: 'The OAuth `code` generated by Facebook and sent to the `callbackUrl` if the user chooses to grant your app the requested permissions',
      required: true
    },
    callbackUrl: {
      example: 'http://localhost:1337/user/facebook/login',
      description: 'The redirect URL that was used when generating the provided `code`',
      required: true
    }
  },

  defaultExit: 'success',
  catchallExit: 'error',

  exits: {
    error: {
      description: 'Triggered when the Facebook API returns an error (i.e. a non-2xx status code)'
    },
    success: {
      description: 'Returns the access token itself, as well as the timestamp when it expires (as a ISO/JSON date)',
      example: {
        token: 'CA2Emk9XsJUIBAHB9sTF5rOdNmAXTDjiHxZaZC1GYtFZCcdYGVnLYZB7jZCvensIpGc22yEzN6CL6wtQ9LPVXTNkuP6eQoUQ0toEVPrmTTqDpj0POijBpsuZBnx7jrZCHaTw8leiZBn0R8u6gZAYZAuD77cA3tnDMYvHhrl42CnljROeC9maWoa5zbsT2TZBXdL9wEuGQDSxKqRPyajRw3P3HEK',
        expires: '2014-11-20T20:34:26.632Z'
      }
    }
  },

  fn: function (inputs, exits) {

    var doJSONRequest = require('../lib/do-request');

    // GET projects/ and send the api token as a header
    doJSONRequest({
      method: 'get',
      url: '/oauth/access_token',
      data: {
        'redirect_uri': inputs.callbackUrl,
        'client_id': inputs.appId,
        'client_secret': inputs.appSecret,
        'code': inputs.code,
      },
      headers: {}
    }, function (err, responseBody) {
      if (err) {
        return exits.error(err);
      }

      // Parse Facebook Access Token from request Body
      var token;
      try {

        return exits.success({
          token: responseBody.access_token,
          expires: (function getExpirationDateAsISOString (){
            var now = new Date();
            var secondsFromNowToExpiry = +responseBody.expires_in;
            var expirationDate = new Date( (now.getTime() + (secondsFromNowToExpiry*1000)) );
            return expirationDate.toJSON();
          })()
        });
      } catch (parseError){
        return exits.error(parseError);
      }
    });
  }
};
